// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // 15 | 14 | 13 | 12 | 11 | 10 | 09 | 08 | 07 | 06 | 05 | 04 | 03 | 02 | 01 | 00 |
    //  i |  x |  x |  a | c6 | c5 | c4 | c3 | c2 | c1 | d3 | d2 | d1 | 3j | j2 | j1 |
    
    // 1 11 0 001100 000 001
    // Input Mux
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMuxIn);
    
    // ARegister
    // Write to AReg if instruction[15] == 0  [A-Type] OR (intruction[15] = 1 AND instruction[5] = 1) [C-Type]
    And(a=instruction[15], b=instruction[5], out=CLoadAReg);
    Not(in=instruction[15], out=not15);
    Or(a=not15, b=CLoadAReg, out=loadAReg);
    ARegister(in=outMuxIn, load=loadAReg, out=outAReg, out[0..14]=addressM);

    // DRegister
    // Write to DReg if instruction[15] == 1 [C-Type] AND instruction[4] == 1
    And(a=instruction[15], b=instruction[4], out=loadDReg);
    DRegister(in=outALU, load=loadDReg, out=outDReg);

    // AM Mux
    // If instruction[15] == 0 [A-Type] => 0 
    // else if instruction[15] == 1 [C-Type] select inM if instruction[12] == 0, else AReg
    And(a=instruction[15], b=instruction[12], out=selAMMux);
    // Mux16(a=inM, b=outAReg, sel=selAMMux, out=outAMMux);
    Mux16(a=outAReg, b=inM, sel=selAMMux, out=outAMMux);

    // if i == 1 [C-Type] ALU controls are the c bits (6-11)
    // if i == 0, output y
    Not(in=instruction[15], out=notI);
    /*
    |  i | cn | zx | nx | zy | ny |  f | no |
    |  0 |  0 |  1 |  1 |  0 |  0 |  0 |  0 |
    |  0 |  1 |  1 |  1 |  0 |  0 |  0 |  0 |
    |  1 |  0 |  0 |  0 |  0 |  0 |  0 |  0 |
    |  1 |  1 |  1 |  1 |  1 |  1 |  1 |  1 |
    => zx = !i OR c6
    => nx = !i OR c5
    => zy = i AND c4
    => ny = i AND c3
    =>  f = i AND c2
    => no = i AND c1
    */
    Or(a=notI, b=instruction[11], out=zx);
    Or(a=notI, b=instruction[10], out=nx);
    And(a=instruction[15], b=instruction[9], out=zy);
    And(a=instruction[15], b=instruction[8], out=ny);
    And(a=instruction[15], b=instruction[7], out=f);
    And(a=instruction[15], b=instruction[6], out=no);
    ALU(x=outDReg, y=outAMMux, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outALU, out=outM, zr=zr, ng=ng);

    // Write to memory iif instruction[15] == 1 and d1 = 1
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    // Load to PC if instruction[15] == 1 AND any of
    Not(in=zr, out=notZr);

    // j1 == 1 AND outALU > 0 => ng == 0 => !ng == 1 AND zr == 0
    Not(in=ng, out=positive);
    And(a=instruction[0], b=positive, out=outPos);
    And(a=outPos, b=notZr, out=outGT);

    // j2 == 1 AND zr == 1
    And(a=instruction[1], b=zr, out=outZero);
    
    // j3 == 1 AND ng == 1
    And(a=instruction[2], b=ng, out=outNeg);
    And(a=outNeg, b=notZr, out=outLT);

    // We load if any of the And above is true And instruction[15] = 1
    Or(a=outGT, b=outZero, out=outGTZero);
    Or(a=outGTZero, b=outLT, out=outGTZeroLT);
    And(a=instruction[15], b=outGTZeroLT, out=loadPC);
    PC(in=outAReg, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}